import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import json


def Ino(x):
    d=0
    ds=1
    s=1
    for i in range(10000):
        d += 2;
        ds *= x*x/(d*d);
        s += ds;
        #print (x,d,ds,s)
        if (ds > s*1e-6):
            pass
        else:
            break
    return s;


def kbWnd(Np, alpha):
    """
    /*
     * This function calculates the Kaiser-Bessel
     * window coefficients
     * Np = number of window points (Even)
     * Alpha useful range 1.5 to 4
     */
    """
    wr = [0 for i in range(Np)];
    den = Ino(np.pi*alpha);
    nOn2 = int(Np/2);
    wr[0] = 0;
    wr[nOn2] = 2;
    for j in range(1,nOn2,1):
        t = Ino(np.pi*alpha*np.sqrt(1-j*j/(nOn2*nOn2)));
        wr[nOn2+j] = 2*t/den;
        wr[nOn2-j] = wr[nOn2+j];
    return wr;

def calcFilter(Fs, Fa, Fb, M, Att):
    """
    /*
     * This function calculates Kaiser windowed
     * FIR filter coefficients for a single passband
     * based on
     * "DIGITAL SIGNAL PROCESSING, II" IEEE Press pp 123-126.
     *
     * Fs=Sampling frequency
     * Fa=Low freq ideal cut off (0=low pass)
     * Fb=High freq ideal cut off (Fs/2=high pass)
     * Att=Minimum stop band attenuation (>21dB)
     * M=Number of points in filter (ODD number)
     * H[] holds the output coefficients (they are symetric only half generated)
     */
    """
    Fs=float(Fs)
    Np = int((M-1)/2)
    A = [0 for i in range( Np+1 )]
    H = [0 for i in range( Np+Np+1 )]
    #// Calculate the impulse response of the ideal filter
    A[0] = 2*(Fb-Fa)/Fs;
    for j in range(1,Np+1, 1):
        A[j] = (np.sin(2*j*np.pi*Fb/Fs)-np.sin(2*j*np.pi*Fa/Fs))/(j*np.pi);
    #// Calculate the desired shape factor for the Kaiser-Bessel window
    if (Att<21):
        Alpha = 0;
    elif (Att>50):
        Alpha = 0.1102*(Att-8.7);
    else:
        Alpha = 0.5842*np.pow((Att-21), 0.4)+0.07886*(Att-21);
    #// Window the ideal response with the Kaiser-Bessel window
    Inoalpha = Ino(Alpha);
    for j in range(Np+1):
        H[Np+j] = A[j]*Ino(Alpha*np.sqrt(1-(j*j/float(Np*Np))))/Inoalpha;
    
    for j in range(Np):
        H[j] = H[M-1-j];

    return H;

def freqTranslate(xReal, Npts, Fsmp, Fc):
    """
    /*
     * xReal holds signal data sampled at Fsmp smpl/sec
     * This function frequency translates Npts from xReal
     * shifting frequency fc down to 0 Hz.
     */
    """
    dt = 1.0/Fsmp;#   // Fsmp is the sample frequency
    #// Fc = center frequency of spectral region to be zoom analysed
    yReal=[]
    yImag=[]
    for k in range(Npts):
        yReal.append( xReal[k]*np.cos(2*np.pi*Fc*k*dt)  )
        yImag.append( -xReal[k]*np.sin(2*np.pi*Fc*k*dt) )
    return yReal,yImag

def overlapSaveFilter(H, ipReal, ipImag, nPts):
    """
    /*
     * This function implements digital filtering by the overlap-save method
     * with optional sub-sampled output
     *
     * H[] holds the filter coeffs, M = H.length (number of points in FIR)
     * ipReal[] & ipImag[] holds the complex input data, length > subSmp*(nPts + M)
     * opReal[] & opImag[] is the complex output buffer
     * nPts is the length of the required output data
     */
    """
    M = len(H)
    Np = int((M-1)/2)
    tSize = 1024#,       // tSize is the FFT size to be used
    slab = tSize-M+1
    numPasses = int(np.ceil(nPts / slab))
    #print (M,Np,slab,numPasses)
    ar = []#,
    ai = []#,
    br = []#,     // filter impulse response spectrum
    bi = []#,
    iPtr = 0;#,           // ptr to start of next ip block
    oPtr = 0;#           // ptr to start of op buffer
    #// generate the spectrum of the filter impulse response
    #// initialise filter spectrum
    br = [0 for j in range(tSize)]
    bi = [0 for j in range(tSize)]
    #// put filter coeffs in real array (centered on x=0, wrapping around 1024 pts)
    maxV = np.abs(H[Np]);#   // H[Np] is center point of filter impulse response
    br[0] = H[Np]/maxV;
    for j in range(1,Np+1,1):
        br[j] = H[Np+j]/maxV;
        br[tSize-j] = br[j];
    tmpV=[]
    for i in range(tSize):
        tmpV.append(br[i]+bi[i]*1j)
    rtV = np.fft.fft(tmpV)   
    br = np.real(rtV)/tSize
    bi = np.imag(rtV)/tSize
    
    #// zero the first Np points of the output array (they wont get data)
    #opReal = [0 for i in range(Np)]
    #opImag = [0 for i in range(Np)]
    opReal = [0 for i in range(nPts)]
    opImag = [0 for i in range(nPts)]

    oPtr = Np;#    // move the oPtr ready for first slab
    for j in range(numPasses):
    #for j in range(1):
        ar = [0 for j in range(tSize)]
        ai = [0 for j in range(tSize)]
        #// load the fft buffers
        #print (iPtr,iPtr+tSize-1)
        for i in range(tSize):
            if iPtr+i>=len(ipReal):
                ar[i]=0
                ai[i]=0
            else:
                ar[i] = ipReal[iPtr+i];
                ai[i] = ipImag[iPtr+i];
        iPtr += slab; # // move the ip ptr ready for next slab
        #fft(1, tSize, ar, ai);
        tmpV=[]
        for i in range(tSize):
            tmpV.append(ar[i]+ai[i]*1j)
        rtV = np.fft.fft(tmpV)   
        ar = np.real(rtV)/tSize
        ai = np.imag(rtV)/tSize
        
        #// multiply spectrum by filter spectrum
        for i in range(tSize):
            tr = ar[i]*br[i] - ai[i]*bi[i];
            ti = ar[i]*bi[i] + ai[i]*br[i];
            ar[i] = tr;
            ai[i] = ti;
        #// inverse FFT back to time domain
        #fft(-1, tSize, ar, ai);
        tmpV=[]
        for i in range(tSize):
            tmpV.append(ar[i]+ai[i]*1j)
        rtV = np.fft.ifft(tmpV)   
        ar = np.real(rtV)*tSize
        ai = np.imag(rtV)*tSize
        
        #// unload just the slab of uncorrupt data
        for i in range(slab):
            if (oPtr+i >= nPts):
                break;
            #print (len(opReal),len(ar),oPtr+i,Np+i,nPts)
            opReal[oPtr+i] = ar[Np+i];
            opImag[oPtr+i] = ai[Np+i];  
        oPtr += slab; # // move the op ptr ready for next slab
    return opReal,opImag
data3=[]
for foffset in range(2300):
    alpha=2.5
    
    fs = 65536.
    f1 = 18811.
    f2 = 18925.
    
    f1 = 19000.+foffset
    f2 = 100
    
    dt = 1./fs
    fc=19000
    
    t1=np.arange(13600)*dt
    sig1 = np.sin(f1*2*np.pi*t1)
    sig2 = np.sin(f2*2*np.pi*t1)
    
    np.random.seed(1)
    #sigBuf = sig1 + sig2 + np.random.randn(len(t1)) + np.random.randn(len(t1)) -1
    sigBuf = sig1 + sig2 + np.random.random(len(t1)) + np.random.random(len(t1)) -1
    #sigBuf = sig1 + sig2 
    
    tSize=512
    fa=0
    fb=8190
    m=115
    att=96
    
    kbw = kbWnd(tSize, 2.5);#        // generate KB window for plotting spectra
    coeffs = calcFilter(fs, fa, fb, m, att);#  // generate anti-aliasing filter
    
    
    aReal=[]
    aImag=[]
    
    for i in range(512):
        #print (kbw[i],sig1["0"][i],sig1["0"][i]*kbw[i])
        aReal.append(sigBuf[i]*kbw[i])
        aImag.append(0)
    
    yFft = np.fft.fft(aReal)
    nFft = len(yFft)
    freq = np.arange(nFft)*(fs/nFft );
    #plt.plot(freq[:int(nFft/2)],20*np.log10(np.abs(yFft[:int(nFft/2)])))
    
    
    aReal, aImag = freqTranslate(sigBuf,13600, fs, fc);
    #print (len(aReal),len(aImag))
    opReal, opImag = overlapSaveFilter(coeffs, aReal, aImag, 13600);
          
    #print (dump["aImag2"][:3])
    
    aReal=[]
    aImag=[]
    for i in range(3400):
        aReal.append(16*opReal[4*i]);#   // sub-sample
        aImag.append(16*opImag[4*i]);#
    opReal, opImag = overlapSaveFilter(coeffs, aReal, aImag,3200);
    #	//dic1["opReal2"]=opReal;
    #	//dic1["opImag2"]=opImag;
    aReal=[]
    aImag=[]
    for i in range(800):
        aReal.append(16*opReal[4*i])
        aImag.append(16*opImag[4*i])
    
    #// for diagnostics only, grab a buffer full of time data
    for i in range(tSize):
        aReal[i] *= kbw[i];      #// apply kb window
        aImag[i] *= kbw[i];
        
    #fft(1, tSize, aReal, aImag);
    
    
    tmpV=[]
    for i in range(tSize):
        tmpV.append(aReal[i]+aImag[i]*1j)
        
    rtV = np.fft.fft(tmpV)   
    aReal = np.real(rtV)/tSize
    aImag = np.imag(rtV)/tSize
    
    
    #plt.plot(20*np.log10(np.abs(rtV)))
    yFft = rtV
    
    #yFft = np.fft.fft(aReal)
    nFft = len(yFft)
    freq = np.arange(nFft)*(fs/nFft );
    #plt.plot(20*np.log10(np.abs(yFft)))
    a = np.abs(yFft)
    print ( f1,a.argmax() )
    data3.append([f1,a.argmax()])
    #17000,262
    #17001,262
    #17002,262
    #17003,262
    #17004,263
    #17012,263
    #17013,264
    #17016,264
    #17032,266
    #17500,324
    #18000,387
    #18500,449
    
df = pd.DataFrame(data3,columns=["freq","binnum"])
df.to_msgpack("zoomfft3.msg")

"""
>>> (65536/2/16.)/256
8.0
>>> (65536/16.)/512
8.0
>>>
fs/16/tSize
"""
